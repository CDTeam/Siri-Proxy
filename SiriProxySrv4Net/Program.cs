// Copyright (c) 2011,cd-team.org.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Diagnostics;
using SiriProxy.Plugins.Interface4Net;

namespace SiriProxySrv4Net
{
    unsafe class Program
    {
        static FuncEnumAvailablePlugins defaultcEnumPlugins = new FuncEnumAvailablePlugins(PluginLoader.EnumAvailablePlugins);
        static FuncPluginInfoArrayFree defaultArrayFree = new FuncPluginInfoArrayFree(PluginLoader.PluginInfoArrayFree);

        static void Main(string[] args)
        {
            string exePath = Process.GetCurrentProcess().MainModule.FileName;
            int argc = args.Length;

            //构造参数数组，注意到,.net不同于c语言,args[0]不是执行程序的路径
            byte** argv = stackalloc byte*[argc + 1];
            IntPtr p = Marshal.StringToHGlobalAnsi(exePath);
            argv[0] = (byte*)p.ToPointer();
            for (int i = 0; i < argc; i++)
            {
                //为各个参数分配非托管的内存
                p = Marshal.StringToHGlobalAnsi(args[i]);
                argv[i+1] =(byte*)p.ToPointer();
            }

           // plist_free(IntPtr.Zero);

            int code = ServerMain(argc+1,argv,defaultcEnumPlugins,defaultArrayFree);//覆盖默认的插件加载方式
            RegisterPluginInfo(IntPtr.Zero);
            for (int i = 0; i < argc; i++)
            {
                //释放非托管的内存
                Marshal.FreeHGlobal(new IntPtr(argv[i + 1]));
            }
        }

        //使用该导出函数覆盖默认c++实现的插件查找和加载机制,SiriProxy.Plugins.Interface4Net.dll对.net插件的查找和加载有着比较科学的实现，
        //参见:PluginLoader.cs
        [DllImport("SiriProxy.dll", EntryPoint = "ServerMain")]
        static extern int ServerMain(int argc,byte** argv,FuncEnumAvailablePlugins pfnEnumPlugins,FuncPluginInfoArrayFree pfnFree);

        //如果使用该导出函数，将不会使用.net的插件查找机制来加载插件，你必须使用RegisterPluginInfo来加载和注册.net插件
        [DllImport("SiriProxy.dll", EntryPoint = "ServerMain")]
        static extern int ServerMain(int argc, byte** argv);

        [DllImport("SiriProxy.dll", EntryPoint = "ServerMain")]
        static extern int ServerMain(int argc,[MarshalAs(UnmanagedType.LPArray)]IntPtr[] argv);

        [DllImport("SiriProxy.dll", EntryPoint = "RegisterPluginInfo")]
        static extern bool RegisterPluginInfo(IntPtr info);

        [DllImport("libplist.dll", EntryPoint = "plist_free")]
        static extern void plist_free(IntPtr p);
    }
}
