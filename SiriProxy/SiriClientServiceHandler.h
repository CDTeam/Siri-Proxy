// Copyright (c) 2011,cd-team.org.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
#pragma once
#include "zlib.h"
#include "StdAfx.h"
#include "PackageProcessor.h"
#include "SafeSocketReactor.h"
#include "SiriTokenProvider.h"

class SiriClientServiceHandler:public IPackageEventHandler
{
	friend class PluginMgr;
	static const string SIRI_SERVICE_HOST;
	static const unsigned short SIRI_SERVICE_PORT;
	static const unsigned int READ_SIZE=1024;
	static const size_t	CHUNK_SIZE=16384;
	enum PUSH_STATE
	{
		PUSH_STATE_PROCESS_HTTP_HEAD,
		PUSH_STATE_PROCESS_0xAACCEE02,
		PUSH_STATE_PROCESS_ZIP_DATA
	};
	enum PULL_STATE
	{
		PULL_STATE_PROCESS_HTTP_HEAD,
		PULL_STATE_PROCESS_0xAACCEE02,
		PULL_STATE_PROCESS_ZIP_DATA
	};
	z_stream inflatestrm_push;
	z_stream deflatestrm_push;
	PackageProcessor *unpack_push;

	z_stream inflatestrm_pull;
	z_stream deflatestrm_pull;
	PackageProcessor *unpack_pull;

	SecureStreamSocket s1;
	Timestamp t1;
	Timestamp t2;
	SecureStreamSocket s2;
	vector<char> m_asock_send_buffer;
	SiriTokenProvider::Ptr pTokenMgr;
	SocketReactor* mon;
	vector<char> m_buffer_push;
	Logger* pLogger;
	PUSH_STATE state_push;
	PULL_STATE state_pull;
	int m_ThreadId;
	int nAgentReadSleep;
	int nSiriReadSleep;
	string strUserAgent;
	string strAceHost;
	bool   bCatchToken;
public:
	typedef SiriClientServiceHandler* Ptr;
	static SiriClientServiceHandler* Create(const SecureStreamSocket& sock,bool catchTocken);
	std::string getStrAceHostString() const { return strAceHost; }
	std::string getUserAgentString() const { return strUserAgent; }
	static bool m_bLogging;//是否记录日志
	void ListenNetworkEvents();
	void Finalize();
	void onSiriSocketReadEvent(ReadableNotification* pNf);
	void onAgentSocketReadEvent(ReadableNotification* pNf);
	void onError(ErrorNotification* pNf);
	void onSocketIdle(IdleNotification* pNf);

	virtual void OnPingPackage(const char* pingData,const size_t& dataLen,bool bPush);
	virtual void OnPlistPackage(const char* plistData,const size_t& dataLen,bool bPush);
	virtual void OnPackageParseError(const string& msg,bool bPush);
	
protected:
	void OnSiriSocketReadable();
	void OnAgentSocketReadable();
	virtual bool CheckHeaderBufferSize(const size_t& size);
	void ProcessPushNetworkStream();
	bool WriteSocketPlistBin(const char* plistbin,const size_t& dataLen,bool bPush);
private:
	SiriClientServiceHandler(const SecureStreamSocket& sock);
	static void VectorBufferCutLeft(vector<char>& buffer,const size_t& offset);
	void AgentSocketSendBytes(const char* buffer,const size_t& len);
	void SiriSocketSendBytes(const char* buffer,const size_t& len);
	void SiriSocketReadAll();
	void AgentSocketReadAll();
	bool GetPushPackageFromData();
	bool WritePushPackageToData(const char* package,const size_t& packageLen,vector<char>& data);

	vector<char> m_buffer_pull;
	bool GetPullPackageFromData();
	bool WritePullPackageToData(const char* package,const size_t& packageLen,vector<char>& data);
	void ProcessPullNetworkStream();
public:
	~SiriClientServiceHandler(void);
};
