// Copyright (c) 2011,cd-team.org.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
#include "StdAfx.h"
#include "SiriClientConnection.h"
#include "SiriClientConnectionFactory.h"
#include "MessageProcessHelper.h"
#include "SiriTcpSvr.h"
#include <plist/plist++.h>
#include "SiriTokenProvider.h"
#include "DbHelpSQL.h"
#include "HtmlHelper.h"
#include "PluginAdapter.h"
#include <Poco/RegularExpression.h>

#include "PluginAdapter.h"

std::string uri_encrypt_token;
bool g_enable_iphone4_server=true;

#include <Windows.h>
class Program:public ServerApplication
{
public:
	Program(): _helpRequested(false)
	{
		Poco::Net::initializeSSL();
	}

	~Program()
	{
		Poco::Net::uninitializeSSL();
	}

protected:
	void initialize(Application& self)
	{
		loadConfiguration(); // 加载默认的配置文件，如果存在的话 
		
		Context::Ptr ctx=new Context(Context::CLIENT_USE,"",Context::VERIFY_NONE);
		
		SSLManager& man=SSLManager::instance();
		SSLManager::PrivateKeyPassphraseHandlerPtr pkey=man.clientPassphraseHandler();
		man.initializeClient(pkey,new AcceptCertificateHandler(false),ctx);
		
		ServerApplication::initialize(self);
	}

	void uninitialize()
	{
		ServerApplication::uninitialize();
	}

	void defineOptions(OptionSet& options)
	{
		ServerApplication::defineOptions(options);

		options.addOption(
			Option("help", "h", "显示命令行帮助") 
			.required(false)
			.repeatable(false));
	}

	void handleOption(const std::string& name, const std::string& value)
	{
		ServerApplication::handleOption(name, value);
		
		if (name == "help")
			_helpRequested = true;
	}

	void displayHelp()
	{
		HelpFormatter helpFormatter(options());
		helpFormatter.setCommand(commandName());
		helpFormatter.setUsage("OPTIONS");
		helpFormatter.setHeader(".");
		helpFormatter.format(std::cout);
	}

	int main(const std::vector<std::string>& args)
	{
		InitPhone4sHeaderTmpl();
		HtmlHelper::InitUrls();
		PluginMgr::Current()->LoadPlugin();

		if(this->config().has("ticket.watermark"))
		{
			Ticket::EXPIRE_WATER_MARK=this->config().getInt("ticket.watermark",2);
		}
		
		SiriTokenProvider::InitCache();

		if (_helpRequested)
		{
			displayHelp();
		}
		else
		{
			unsigned short port = (unsigned short) config().getInt("HttpSvr.port", 7777);
			string ipv4v6=config().getString("HttpSvr.IPv4v6");
			uri_encrypt_token=config().getString("HttpSvr.admin.encrypt");
			uri_encrypt_token=Poco::toLower(uri_encrypt_token);
			SocketAddress addrs(ipv4v6,port);
			ServerSocket ssock(addrs);
			HTTPServerParams *prams=new HTTPServerParams();
			prams->setKeepAlive(true);
			HTTPServer httpsrv(new RequestHandlerFactoryImpl(),ssock,prams);
			httpsrv.start();
			Poco::Logger& logger=this->logger();
			logger.information(format("http服务器已经启动，绑定地址:%s,绑定端口:%d",ipv4v6,(int)port));
			logger.information(format("http服务器管理地址为http://%s:%d/admin/%s/index.html",ipv4v6,(int)port,uri_encrypt_token));
			RunAsTcpSvr();

			httpsrv.stop();
		}
		return Application::EXIT_OK;
	}

	void RunAsTcpSvr()
	{
		SiriTcpSvr* iPhone4sSrv=SiriTcpSvr::iPhone4sServer();
		
		if(this->config().has("server.iphone4.enable"))
		{
			g_enable_iphone4_server=this->config().getBool("server.iphone4.enable",true);
		}

		SiriTcpSvr* iPhone4Srv=NULL;
		if(g_enable_iphone4_server)
		{
			iPhone4Srv=SiriTcpSvr::iPhone4Server();
			
		}
		
		iPhone4sSrv->start();
		if(g_enable_iphone4_server)
		{
			iPhone4Srv->start();
		}
		this->waitForTerminationRequest();
		iPhone4sSrv->stop();
		if(g_enable_iphone4_server)
		{
			iPhone4Srv->stop();
		}
	}

	void RunAsHttpSvr() 
	{
		Poco::Logger& logger=this->logger();
		logger.information("读取配置文件.."); 
		unsigned short port = (unsigned short) config().getInt("HttpSvr.port", 9443);
		std::string format(config().getString("HttpSvr.format", DateTimeFormat::SORTABLE_FORMAT));
		std::string pathCA(config().getString("openSSL.server.caConfig"));//openSSL.server.caConfig

		X509Certificate cer(pathCA);

		SecureServerSocket ssock(port);

		HTTPServerParams *prams=new HTTPServerParams();
		prams->setKeepAlive(true);
		HTTPServer httpsrv(new RequestHandlerFactoryImpl(),ssock,prams);
		httpsrv.start();
		Context::Ptr ctx=ssock.context();
		ostringstream ms;
		ms<<"Https服务器已经启动\n";
		ms<<"-----------------------------详细信息-----------------------------\n";
		ms<<"监听端口:"<<port<<"\n";
		ms<<"SSL验证模式:"<<ctx->verificationMode()<<"\n";
		ms<<"颁发给:"<<cer.commonName()<<"\n";
		ms<<"证书颁发者:"<<cer.issuerName()<<"\n";
		ms<<"subjectName:"<<cer.subjectName()<<"\n";
		ms<<"expiresOn:"<<DateTimeFormatter::format(cer.expiresOn(),"%Y-%n-%d %H-%M-%S")<<"\n";
		ms<<"validFrom:"<<DateTimeFormatter::format(cer.validFrom(),"%Y-%n-%d %H-%M-%S")<<"\n";
		ms<<"KeepAlive:"<<(prams->getKeepAlive() ? "是\n":"否\n");
		ms<<"接收超时时间:"<<prams->getTimeout().totalSeconds()<<"s\n";
		ms<<"KeepAliveTimeout:"<<prams->getKeepAliveTimeout().seconds()<<"s\n";
		ms<<"启用会话缓存:"<<(ctx->sessionCacheEnabled() ? "是\n":"否\n");
		ms<<"会话缓存大小:"<<ctx->getSessionCacheSize()<<"\n";
		ms<<"会话超时时间:"<<ctx->getSessionTimeout()<<"s\n";
		
		ms<<"------------------------------------------------------------------\n";
		logger.information(ms.str());

		this->waitForTerminationRequest();

		httpsrv.stop();
	}

private:
	bool _helpRequested;
};

extern int ServerMain(int argc, char** argv,FuncEnumAvailablePlugins pfnEnumPlugins,FuncPluginInfoArrayFree pfnArrayFree)
{
	if(pfnArrayFree!=NULL)
		pfnPluginInfoArrayFree=pfnArrayFree;
	if(pfnEnumPlugins!=NULL)
		pfnEnumAvailablePlugins=pfnEnumPlugins;

	std::cout<<argv[0]<<std::endl;
	Program app;				
	return app.run(argc, argv);
}