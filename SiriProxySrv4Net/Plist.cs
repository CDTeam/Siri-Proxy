// Copyright (c) 2011,cd-team.org.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;

namespace SiriProxySrv4Net
{
    enum PlistType
    {
	    PLIST_BOOLEAN,	/**< Boolean, scalar type */
	    PLIST_UINT,	/**< Unsigned integer, scalar type */
	    PLIST_REAL,	/**< Real, scalar type */
	    PLIST_STRING,	/**< ASCII string, scalar type */
	    PLIST_ARRAY,	/**< Ordered array, structured type */
	    PLIST_DICT,	/**< Unordered dictionary (key/value pair), structured type */
	    PLIST_DATE,	/**< Date, scalar type */
	    PLIST_DATA,	/**< Binary data, scalar type */
	    PLIST_KEY,	/**< Key in dictionaries (ASCII String), scalar type */
	    PLIST_NONE	/**< No type */
    } ;

    
    internal unsafe static class Plist
    {
        const string ModuleName = "libplist.dll";

        [DllImport(ModuleName)]
        public static extern void plist_free(IntPtr plist);

        [DllImport(ModuleName)]
        public static extern void plist_from_bin(IntPtr plist_bin, UInt32 length, ref IntPtr plist);

        [DllImport(ModuleName)]
        public static extern void plist_to_bin(IntPtr plist, ref IntPtr plist_bin,ref UInt32 length);

        [DllImport(ModuleName)]
        public static extern void plist_to_xml(IntPtr plist, ref IntPtr plist_xml,ref UInt32 length);

        [DllImport(ModuleName)]
        public static extern void plist_from_xml(IntPtr plist_xml, UInt32 length, ref IntPtr plist);

        [DllImport(ModuleName)]
        public static extern PlistType plist_get_node_type(IntPtr node);

        [DllImport(ModuleName)]
        public static extern void plist_dict_new_iter(IntPtr node,ref IntPtr iter);

        [DllImport(ModuleName)]
        public static extern void plist_dict_next_item(IntPtr node, IntPtr iter,ref IntPtr key, ref IntPtr val);

        [DllImport(ModuleName)]
        public static extern void plist_get_string_val(IntPtr node,ref IntPtr val);

        [DllImport(ModuleName)]
        public static extern void plist_get_data_val(IntPtr node,ref IntPtr val,ref long length);

        [DllImport(ModuleName)]
        public static extern void plist_set_string_val(IntPtr node, IntPtr val);

        [DllImport(ModuleName)]
        public static extern void plist_set_data_val(IntPtr node,IntPtr val, long length);

        [DllImport(ModuleName)]
        public static extern IntPtr plist_array_get_item(IntPtr node, UInt32 n);

        [DllImport(ModuleName)]
        public static extern UInt32 plist_array_get_size(IntPtr node);

        [DllImport("libplist.dll")]
        public static extern void PlistFreeMem(IntPtr p);
        //public static void PlistFreeMem(IntPtr p)
        //{
        //    void* memblock = p.ToPointer();
        //    //free(memblock);
        //}

        [DllImport("msvcrt.dll", EntryPoint = "free")]
        static extern void free(void* memblock);
    }
}
