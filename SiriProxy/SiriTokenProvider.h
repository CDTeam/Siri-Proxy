// Copyright (c) 2011,cd-team.org.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
#pragma once
#include <list>
#include <vector>
#include <string>
#include <Poco/Mutex.h>
using namespace std;
using namespace Poco;
typedef void* plist_t;

//代表客户端凭据信息
struct Ticket
{
	static int EXPIRE_WATER_MARK;
	string x_ace_host;
	string user_agent;
	string speechId;
	string assistantId;
	vector<char> sessionValidationData;
	int expired;
	Int64 modify;
	Int64 session_validate_date;

	string ip_address;

	bool processed;
	bool used;

	string x_ace_host_tmpl;

	string last_speak_aceId;

	string last_speak_refId;

	bool iPhone4s;

	bool iPhone4s_Create_Key;

	bool IsExpired()const
	{
		return expired>EXPIRE_WATER_MARK;
	}

	bool IsValid()const
	{
		return !user_agent.empty() && !speechId.empty()
			&& !assistantId.empty() && !sessionValidationData.empty();
	}
	bool operator == (const Ticket& other)
	{
		return this->assistantId==other.assistantId;
	}
	Ticket()
	{
		iPhone4s=false;
		expired=0;
		modify=0;
		session_validate_date=0;
		processed=false;
		used=false;
		iPhone4s_Create_Key=false;
	}
	const std::string& operator () () const
	{
		return x_ace_host;
	}
};

struct key_acl_log
{
	string key_id;
	int hints;
	int ip_count;
};

//Siri客户端凭据提供程序
class SiriTokenProvider
{
	friend class SiriClientServiceHandler;
public:
	typedef SiriTokenProvider* Ptr;

	//根据ACE Http头获取SiriTokenProvider的实例
	static SiriTokenProvider::Ptr FromAceHeader(const string& header);

	//从数据库初始化Tickets缓存
	static void InitCache();

	//释放SiriTokenProvider的实例
	void FreeInstanse(SiriTokenProvider::Ptr ptr);

	//获取speechId
	std::string getSpeechId() const { return m_Ticket.speechId; }

	//获取assistantId
	std::string getAssistantId() const { return m_Ticket.assistantId; }

	//获取凭据信息
	Ticket getTicket()const {return m_Ticket;}

	//iPhone4s更新凭据
	void iPhone4sRefreshTicket();

	void iPhone4RefreshTicket();

	static bool IsKeyAuthoriz(const char* key);
	static int GetExpiredTicketCount();
	static int GetTotalTicketCount();
	static vector<Ticket> GetAllValidTickets();
	static int GetCacheTicketCount();
	static int GetTickeInUseCount();
	static bool GetNextTicket(Ticket* pTicket );
	static void RemoveTicket(const char* assistantId);
private:
	Ticket m_Ticket;
	string m_http_string;
	static list<Ticket> g_tickets;
	static vector<string> g_allkeys;
	#ifdef _SAVE_PLIST
	static void SavePlistXML(const char* plistData,const size_t dataLen,bool bPush);
	#endif // _SAVE_PLIST
protected:
	SiriTokenProvider();
	virtual bool CheckHeader();
	static void PushBackTicket(const Ticket& t,bool bLock=true);
	static void RecycleTicket(const Ticket& t,bool bLock=true);
	static list<string> assistant_in_uses;
private:
	bool processed;
	bool iPhone4s;
	static Poco::FastMutex _mutex_tickets;
	static Poco::FastMutex _mutex_keys;
};
