// Copyright (c) 2011,cd-team.org.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
#pragma once
#include <stdio.h>
#include <ctime>
#include <string>
#include <vector>
#include <sstream>
#include <fstream>
#include <iostream>
#include <algorithm>
#include <assert.h>
#include <Poco/Thread.h>
#include <Poco/MemoryStream.h>
#include <Poco/Logger.h>
#include <Poco/BinaryReader.h>
#include <Poco/Timestamp.h>
#include <Poco/Timezone.h>
#include <Poco/DateTimeFormat.h>
#include <Poco/DateTimeFormatter.h>
#include <Poco/AbstractObserver.h>
#include <Poco/Net/NetSSL.h>
#include <Poco/Net/SecureServerSocket.h>
#include <Poco/Net/HTTPServer.h>
#include <Poco/Net/SecureStreamSocket.h>
#include <Poco/Net/HTTPServerRequestImpl.h>
#include <Poco/Net/X509Certificate.h>
#include <Poco/Net/SSLManager.h>
#include <Poco/Net/PrivateKeyPassphraseHandler.h>
#include <Poco/Net/AcceptCertificateHandler.h>
#include <Poco/FileStream.h>
#include <Poco/StreamCopier.h>
#include <Poco/MemoryStream.h>
#include <Poco/DeflatingStream.h>
#include <Poco/InflatingStream.h>
#include <Poco/Net/SSLManager.h>
#include <Poco/Net/StreamSocket.h>
#include <Poco/Net/SocketStream.h>
#include <Poco/Net/TCPServer.h>
#include <Poco/Net/TCPServerConnection.h>
#include <Poco/Net/SocketReactor.h>
#include <Poco/Net/SocketNotification.h>
#include <Poco/Net/HTTPRequestHandler.h>
#include <Poco/Net/HTTPServerRequest.h>
#include <Poco/Net/HTTPServerResponse.h>
#include <Poco/Net/HTTPSClientSession.h>
#include <Poco/Net/TCPServerConnectionFactory.h>
#include <Poco/Util/Application.h>
#include <Poco/Util/Option.h>
#include <Poco/Util/OptionSet.h>
#include <Poco/Util/HelpFormatter.h>
#include <Poco/Util/ServerApplication.h>
#include "AdminRequestHandler.h"
#include "RequestHandlerFactoryImpl.h"

#include "zlib.h"

using namespace std;
using namespace Poco;
using namespace Poco::Net;
using namespace Poco::Util;
#define InternalLogInfo(msg) {Poco::Logger& lg=Application::instance().logger();lg.information(msg);}
#define InternalWarning(msg) {Poco::Logger& lg=Application::instance().logger();lg.warning(msg);}
extern string iPhone4s_header_tmpl;

typedef struct tcp_keepalive
{
	u_long onoff;
	u_long keepalivetime;
	u_long keepaliveinterval;
}TCP_KEEPALIVE_ARG,*PTCP_KEEPALIVE_ARG;

bool SetSocketKeepAlive(SOCKET s);

void ConvertEndian64(void* lpMem );
void ConvertEndian32(void* lpMem );
void ConvertEndian16(void* lpMem );
//void PlistFreeMem(void* memblock);
void InitPhone4sHeaderTmpl();
std::wstring UTF8ToUTF16(const std::string &utf8Str);
std::string Utf16ToUtf8( const wstring& utf16Str );

DateTime time_t_to_localtime(const time_t& t);
string format_time_t_string(const time_t& t);

template<typename T> class Guard 
{
	T* __ptr;
public:
	Guard()
	{
		__ptr=0;
	}
	Guard(T* ptr)
	{
		__ptr=ptr;
	}
	~Guard()
	{
		if(__ptr!=0)
		delete __ptr;
		__ptr=0;
	}
	void SetDataPtr(T* pData)
	{
		if(__ptr!=0)
			delete __ptr;
		__ptr=pData;
	}
};