// Copyright (c) 2011,cd-team.org.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
#include "StdAfx.h"
#include "DbHelpSQL.h"
#include "DbHelpMySQL.h"
#include <Poco/Util/Application.h>
#include <Poco/Data/Common.h>
#include <Poco/Data/SessionFactory.h>
#include <Poco/Data/MySQL/Connector.h>
#include "SiriTokenProvider.h"
using namespace Poco::Data;
extern string g_dbPath;

DbHelpSQL* DbHelpSQL::__sigleton=NULL;
DbHelpSQL* DbHelpSQL::Current()
{
	if(NULL==__sigleton)
	{
		LayeredConfiguration& cfg=Application::instance().config();
		bool enable_mysql=true;
		if(cfg.has("database.mysql.enable"))
		{
			enable_mysql=cfg.getBool("database.mysql.enable",true);
		}
		
		if(enable_mysql)
		{
			Poco::Data::MySQL::Connector::registerConnector();
			Application& app=Application::instance();
			string usr=app.config().getString("database.mysql.user");
			string pwd=app.config().getString("database.mysql.password");
			string db=app.config().getString("database.mysql.dbname");
			string connectionString=format("user=%s;password=%s;db=%s;compress=true;auto-reconnect=true",usr,pwd,db);
			__sigleton=new DbHelpMySQL(connectionString);
		}
		else
		{
			__sigleton=new DbHelpSQL();
		}

		if(cfg.has("ticket.checkkey"))
		{
			__sigleton->checkKey=cfg.getBool("ticket.checkkey",false);
		}
	}
	return __sigleton;
}

bool DbHelpSQL::PushTicket( Ticket& t )
{
	return true;
}

bool DbHelpSQL::TicketFromAssistantId( const string& assistantId,Ticket& t )
{
	return true;
}

vector<Ticket> DbHelpSQL::GetAllValidTickets()
{
	return vector<Ticket>();
}

vector<Ticket> DbHelpSQL::GetAllTickets()
{
	return vector<Ticket>();
}

int DbHelpSQL::GetTotalTicketCount()
{
	return 0;
}

int DbHelpSQL::GetExpiredTicketCount()
{
	return 0;
}

bool DbHelpSQL::CheckKeyFlow( const string& key,const string& ipaddr )
{
	return true;
}

bool DbHelpSQL::CheckKeyFlow( const char* key,const char* ipaddr )
{
	return true;
}

vector<key_acl_log> DbHelpSQL::GetKeyAclDetail( const int& limit/*=-1*/ )
{
	return vector<key_acl_log>();
}

vector<string> DbHelpSQL::GetAllKeys()
{
	return vector<string>();
}

bool DbHelpSQL::RemoveTicket( const char* assistantId )
{
	return true;
}

DbHelpSQL::DbHelpSQL()
{
	checkKey=false;
}

bool DbHelpSQL::CheckKey()
{
	return checkKey;
}
