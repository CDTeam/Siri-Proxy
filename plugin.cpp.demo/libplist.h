// Copyright (c) 2011,cd-team.org.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#pragma once
typedef __int8 int8_t;
typedef __int16 int16_t;
typedef __int32 int32_t;
typedef __int64 int64_t;

typedef unsigned __int8 uint8_t;
typedef unsigned __int16 uint16_t;
typedef unsigned __int32 uint32_t;
typedef unsigned __int64 uint64_t;
typedef void *plist_dict_iter;
typedef void* plist_t;
typedef enum
{
	PLIST_BOOLEAN,	/**< Boolean, scalar type */
	PLIST_UINT,	/**< Unsigned integer, scalar type */
	PLIST_REAL,	/**< Real, scalar type */
	PLIST_STRING,	/**< ASCII string, scalar type */
	PLIST_ARRAY,	/**< Ordered array, structured type */
	PLIST_DICT,	/**< Unordered dictionary (key/value pair), structured type */
	PLIST_DATE,	/**< Date, scalar type */
	PLIST_DATA,	/**< Binary data, scalar type */
	PLIST_KEY,	/**< Key in dictionaries (ASCII String), scalar type */
	PLIST_NONE	/**< No type */
} plist_type;

typedef void (*fn_plist_free)(plist_t plist);
typedef void (*fn_plist_from_bin)(const char *plist_bin, uint32_t length, plist_t * plist);
typedef void (*fn_plist_to_bin)(plist_t plist, char **plist_bin, uint32_t * length);
typedef void (*fn_plist_to_xml)(plist_t plist, char **plist_xml, uint32_t * length);
typedef void (*fn_plist_from_xml)(const char *plist_xml, uint32_t length, plist_t * plist);
typedef plist_type (*fn_plist_get_node_type)(plist_t node);
typedef void (*fn_plist_dict_new_iter)(plist_t node, plist_dict_iter *iter);
typedef void (*fn_plist_dict_next_item)(plist_t node, plist_dict_iter iter, char **key, plist_t *val);
typedef void (*fn_plist_get_string_val)(plist_t node, char **val);
typedef void (*fn_plist_get_data_val)(plist_t node, char **val, uint64_t * length);
typedef void (*fn_plist_set_string_val)(plist_t node, const char *val);
typedef void (*fn_plist_set_data_val)(plist_t node, const char *val, uint64_t length);
typedef plist_t(*fn_plist_array_get_item)(plist_t node, uint32_t n);
typedef uint32_t (*fn_plist_array_get_size) (plist_t node);
extern fn_plist_free plist_free;
extern fn_plist_from_bin plist_from_bin;
extern fn_plist_to_bin plist_to_bin;
extern fn_plist_to_xml plist_to_xml;
extern fn_plist_get_node_type plist_get_node_type;
extern fn_plist_dict_new_iter plist_dict_new_iter;
extern fn_plist_dict_next_item plist_dict_next_item;
extern fn_plist_get_string_val plist_get_string_val;
extern fn_plist_get_data_val plist_get_data_val;
extern fn_plist_set_string_val plist_set_string_val;
extern fn_plist_set_data_val plist_set_data_val;
extern fn_plist_from_xml plist_from_xml;
extern fn_plist_array_get_item plist_array_get_item;
extern fn_plist_array_get_size plist_array_get_size;
void init_plist_runtime();

typedef void (*FuncMemFree)(void *);
void PlistFreeMem(void* memblock);